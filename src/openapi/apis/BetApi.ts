/* tslint:disable */
/* eslint-disable */
/**
 * BetMonitor for generating matches and Odds
 * The server for simulating a betting portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  BetDto,
  BetPlaceDto,
} from '../models/index.js';
import {
    BetDtoFromJSON,
    BetDtoToJSON,
    BetPlaceDtoFromJSON,
    BetPlaceDtoToJSON,
} from '../models/index.js';

export interface PlaceBetRequest {
    marketStateId: number;
    betPlaceDto: BetPlaceDto;
}

/**
 * 
 */
export class BetApi extends runtime.BaseAPI {

    /**
     * Place a wager.
     */
    async placeBetRaw(requestParameters: PlaceBetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetDto>> {
        if (requestParameters.marketStateId === null || requestParameters.marketStateId === undefined) {
            throw new runtime.RequiredError('marketStateId','Required parameter requestParameters.marketStateId was null or undefined when calling placeBet.');
        }

        if (requestParameters.betPlaceDto === null || requestParameters.betPlaceDto === undefined) {
            throw new runtime.RequiredError('betPlaceDto','Required parameter requestParameters.betPlaceDto was null or undefined when calling placeBet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bet/place/{marketStateId}`.replace(`{${"marketStateId"}}`, encodeURIComponent(String(requestParameters.marketStateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetPlaceDtoToJSON(requestParameters.betPlaceDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetDtoFromJSON(jsonValue));
    }

    /**
     * Place a wager.
     */
    async placeBet(requestParameters: PlaceBetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetDto> {
        const response = await this.placeBetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
