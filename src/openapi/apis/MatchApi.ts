/* tslint:disable */
/* eslint-disable */
/**
 * BetMonitor for generating matches and Odds
 * The server for simulating a betting portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  MatchDto,
  MatchUpsertDto,
} from '../models/index.js';
import {
    MatchDtoFromJSON,
    MatchDtoToJSON,
    MatchUpsertDtoFromJSON,
    MatchUpsertDtoToJSON,
} from '../models/index.js';

export interface CreateMatchRequest {
    matchUpsertDto: MatchUpsertDto;
}

export interface GetMatchByIdRequest {
    id: number;
}

export interface UpdateMatchAndStatesRequest {
    id: number;
    matchUpsertDto: MatchUpsertDto;
}

/**
 * 
 */
export class MatchApi extends runtime.BaseAPI {

    /**
     * Create a new match
     */
    async createMatchRaw(requestParameters: CreateMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchDto>> {
        if (requestParameters.matchUpsertDto === null || requestParameters.matchUpsertDto === undefined) {
            throw new runtime.RequiredError('matchUpsertDto','Required parameter requestParameters.matchUpsertDto was null or undefined when calling createMatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/match`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MatchUpsertDtoToJSON(requestParameters.matchUpsertDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchDtoFromJSON(jsonValue));
    }

    /**
     * Create a new match
     */
    async createMatch(requestParameters: CreateMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchDto> {
        const response = await this.createMatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get match on id.
     */
    async getMatchByIdRaw(requestParameters: GetMatchByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMatchById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/match/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchDtoFromJSON(jsonValue));
    }

    /**
     * Get match on id.
     */
    async getMatchById(requestParameters: GetMatchByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchDto> {
        const response = await this.getMatchByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a live match with a new matchState
     */
    async updateMatchAndStatesRaw(requestParameters: UpdateMatchAndStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMatchAndStates.');
        }

        if (requestParameters.matchUpsertDto === null || requestParameters.matchUpsertDto === undefined) {
            throw new runtime.RequiredError('matchUpsertDto','Required parameter requestParameters.matchUpsertDto was null or undefined when calling updateMatchAndStates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/match/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MatchUpsertDtoToJSON(requestParameters.matchUpsertDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a live match with a new matchState
     */
    async updateMatchAndStates(requestParameters: UpdateMatchAndStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMatchAndStatesRaw(requestParameters, initOverrides);
    }

}
