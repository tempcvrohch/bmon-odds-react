/* tslint:disable */
/* eslint-disable */
/**
 * BetMonitor for generating matches and Odds
 * The server for simulating a betting portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { LeagueDto } from './LeagueDto.js';
import {
    LeagueDtoFromJSON,
    LeagueDtoFromJSONTyped,
    LeagueDtoToJSON,
} from './LeagueDto.js';
import type { MatchUpsertDtoMatchState } from './MatchUpsertDtoMatchState.js';
import {
    MatchUpsertDtoMatchStateFromJSON,
    MatchUpsertDtoMatchStateFromJSONTyped,
    MatchUpsertDtoMatchStateToJSON,
} from './MatchUpsertDtoMatchState.js';
import type { SportDto1 } from './SportDto1.js';
import {
    SportDto1FromJSON,
    SportDto1FromJSONTyped,
    SportDto1ToJSON,
} from './SportDto1.js';

/**
 * Match between players with markets.
 * @export
 * @interface MatchUpsertDto
 */
export interface MatchUpsertDto {
    /**
     * 
     * @type {number}
     * @memberof MatchUpsertDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MatchUpsertDto
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof MatchUpsertDto
     */
    live: boolean;
    /**
     * 
     * @type {LeagueDto}
     * @memberof MatchUpsertDto
     */
    league: LeagueDto;
    /**
     * 
     * @type {SportDto1}
     * @memberof MatchUpsertDto
     */
    sport: SportDto1;
    /**
     * 
     * @type {Array<number>}
     * @memberof MatchUpsertDto
     */
    playerIds: Array<number>;
    /**
     * 
     * @type {MatchUpsertDtoMatchState}
     * @memberof MatchUpsertDto
     */
    matchState: MatchUpsertDtoMatchState;
}

/**
 * Check if a given object implements the MatchUpsertDto interface.
 */
export function instanceOfMatchUpsertDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "live" in value;
    isInstance = isInstance && "league" in value;
    isInstance = isInstance && "sport" in value;
    isInstance = isInstance && "playerIds" in value;
    isInstance = isInstance && "matchState" in value;

    return isInstance;
}

export function MatchUpsertDtoFromJSON(json: any): MatchUpsertDto {
    return MatchUpsertDtoFromJSONTyped(json, false);
}

export function MatchUpsertDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatchUpsertDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'live': json['live'],
        'league': LeagueDtoFromJSON(json['league']),
        'sport': SportDto1FromJSON(json['sport']),
        'playerIds': json['playerIds'],
        'matchState': MatchUpsertDtoMatchStateFromJSON(json['matchState']),
    };
}

export function MatchUpsertDtoToJSON(value?: MatchUpsertDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'live': value.live,
        'league': LeagueDtoToJSON(value.league),
        'sport': SportDto1ToJSON(value.sport),
        'playerIds': value.playerIds,
        'matchState': MatchUpsertDtoMatchStateToJSON(value.matchState),
    };
}

