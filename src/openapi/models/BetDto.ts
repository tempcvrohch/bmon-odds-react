/* tslint:disable */
/* eslint-disable */
/**
 * BetMonitor for generating matches and Odds
 * The server for simulating a betting portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { BetStatusDto } from './BetStatusDto.js';
import {
    BetStatusDtoFromJSON,
    BetStatusDtoFromJSONTyped,
    BetStatusDtoToJSON,
} from './BetStatusDto.js';
import type { MarketStateDto1 } from './MarketStateDto1.js';
import {
    MarketStateDto1FromJSON,
    MarketStateDto1FromJSONTyped,
    MarketStateDto1ToJSON,
} from './MarketStateDto1.js';

/**
 * 
 * @export
 * @interface BetDto
 */
export interface BetDto {
    /**
     * 
     * @type {number}
     * @memberof BetDto
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof BetDto
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BetDto
     */
    updatedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof BetDto
     */
    stake: number;
    /**
     * 
     * @type {BetStatusDto}
     * @memberof BetDto
     */
    status: BetStatusDto;
    /**
     * 
     * @type {number}
     * @memberof BetDto
     */
    toReturn?: number;
    /**
     * 
     * @type {MarketStateDto1}
     * @memberof BetDto
     */
    marketState?: MarketStateDto1;
}

/**
 * Check if a given object implements the BetDto interface.
 */
export function instanceOfBetDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "stake" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function BetDtoFromJSON(json: any): BetDto {
    return BetDtoFromJSONTyped(json, false);
}

export function BetDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BetDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'stake': json['stake'],
        'status': BetStatusDtoFromJSON(json['status']),
        'toReturn': !exists(json, 'toReturn') ? undefined : json['toReturn'],
        'marketState': !exists(json, 'marketState') ? undefined : MarketStateDto1FromJSON(json['marketState']),
    };
}

export function BetDtoToJSON(value?: BetDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'stake': value.stake,
        'status': BetStatusDtoToJSON(value.status),
        'toReturn': value.toReturn,
        'marketState': MarketStateDto1ToJSON(value.marketState),
    };
}

